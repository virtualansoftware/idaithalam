Feature: {{feature}}
    Scenario: Load initial set of data
      Given provided all the feature level parameters from file
{{#items}}
  {{#okta}}
    @{{{resource}}}
    Scenario: Read the API token for {{{resource}}}
      Given a user perform a api action
      And basic authentication with [okta_user_id.{{{resource}}}] and [okta_user_password.{{{resource}}}]
      When a user post application/json in api_token resource on okta_token.{{{resource}}}
      Then the status code is 200
      And store AccessToken.{{{resource}}} as key and api's access_token as value
  {{/okta}}
{{/items}}
{{#items}}
    {{#isRest}}
    {{#tags}}
    {{{tags}}} @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    {{^tags}}
    @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    Scenario: {{scenario}} - api call
    {{/isRest}}
    {{#isKafka}}
    {{#kafkaInput}}
    {{#tags}}
    {{{tags}}} @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    {{^tags}}
    @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    Scenario: {{scenario}} - {{method}} kafka message
      Given as a user perform message {{scenario}} action
      {{#hasCreateParams}}
      {{#createParams}}
      And add the {{{value}}} value of the key as {{{key}}}
      {{/createParams}}
      {{/hasCreateParams}}
      {{#skipScenario}}
      And perform-message the {{{skipScenario}}} condition to skip scenario
      {{/skipScenario}}
      {{#hasInputJsonMap}}
      When send mapson message {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} for event {{event}} on {{resource}} with type {{messageType}}
      {{#inputJsonMap}}
        | {{{key}}}                   |  {{{value}}}                        |
      {{/inputJsonMap}}
      {{/hasInputJsonMap}}
      {{#hasInputInline}}
      When send inline message {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} for event {{event}} on {{resource}} with type {{messageType}}
      {{#inputInline}}
        | {{{.}}} |
      {{/inputInline}}
      {{/hasInputInline}}
    {{/kafkaInput}}
    {{/isKafka}}
    {{#isDatabase}}
    {{#dbInput}}
    {{#tags}}
    {{{tags}}} @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    {{^tags}}
    @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    Scenario: {{scenario}} - database action
      Given as a user perform sql {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}query{{/hasStepInfo}} action
      {{#hasCreateParams}}
      {{#createParams}}
      And create variable {{{key}}} as key and {{{value}}} as value
      {{/createParams}}
      {{/hasCreateParams}}
      {{#skipScenario}}
      And perform-db the {{{skipScenario}}} condition to skip scenario
      {{/skipScenario}}
      {{#isSelect}}
      When read {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details on the{{/hasStepInfo}} given {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}query{{/hasStepInfo}} on {{resource}}
      {{/isSelect}}
      {{^isSelect}}
      When execute {{method}} for the given sql {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details on the{{/hasStepInfo}} on {{resource}}
      {{/isSelect}}
      {{#inputInline}}
        | {{{.}}} |
      {{/inputInline}}
    {{/dbInput}}
    {{/isDatabase}}
    {{#isAMQ}}
    {{#amqInput}}
    {{#tags}}
    {{{tags}}} @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    {{^tags}}
    @{{{resource}}}{{#skipScenario}} @skip{{/skipScenario}}
    {{/tags}}
    Scenario: {{scenario}} - amq action
      Given as a user post message {{stepInfo}} action
      {{#hasCreateParams}}
      {{#createParams}}
      And add the {{{value}}} value of the key as {{{key}}}
      {{/createParams}}
      {{/hasCreateParams}}
      {{#skipScenario}}
      And perform-message the {{{skipScenario}}} condition to skip scenario
      {{/skipScenario}}
      When send inline message {{stepInfo}} for messageQ {{event}} on {{resource}} with type AMQ
      {{#inputInline}}
        | {{{.}}} |
       {{/inputInline}}
    {{/amqInput}}
    {{/isAMQ}}
    {{#isRest}}
      Given {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}a user{{/hasStepInfo}} perform {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}a{{/hasStepInfo}} api action
      {{#hasCreateParams}}
      {{#createParams}}
      And add the {{{value}}} value of the key as {{{key}}}
      {{/createParams}}
      {{/hasCreateParams}}
      {{#skipScenario}}
      And perform the {{{skipScenario}}} condition to skip scenario
      {{/skipScenario}}
      {{#okta}}
      And bearer auth with [AccessToken.{{{resource}}}] token
      {{/okta}}
      {{#basicAuth}}
      And basic authentication with [basic_auth_user_id.{{{resource}}}] and [basic_auth_password.{{{resource}}}]
      {{/basicAuth}}
      {{#hasPathParams}}
      And add {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}request{{/hasStepInfo}} with given path params
      {{#pathParams}}
        | {{{key}}}                   | {{{value}}}                         |
       {{/pathParams}}
      {{/hasPathParams}}
      {{#hasQueryParams}}
      And add {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}request{{/hasStepInfo}} with given query params
      {{#queryParams}}
        | {{{key}}}                   | {{{value}}}                         |
      {{/queryParams}}
      {{/hasQueryParams}}
      {{#hasHeaderParams}}
      And add {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}request{{/hasStepInfo}} with given header params
      {{#headerParams}}
        | {{{key}}}                   | {{{value}}}                         |
      {{/headerParams}}
      {{/hasHeaderParams}}
      {{#hasFormParams}}
      {{#hasMPartParams}}
      And add {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}request{{/hasStepInfo}} with {{contentType}} given multipart-form params
      {{/hasMPartParams}}
      {{^hasMPartParams}}
      And add {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}request{{/hasStepInfo}} with {{contentType}} given form params
      {{/hasMPartParams}}
      {{#formParams}}
        | {{{key}}}                   | {{{value}}}                         |
      {{/formParams}}
      {{/hasFormParams}}
      {{#hasCookieParams}}
      And add {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}request{{/hasStepInfo}}  with given cookie params
      {{#cookieParams}}
        | {{{key}}}                   | {{{value}}}                         |
      {{/cookieParams}}
      {{/hasCookieParams}}
      {{#inputFile}}
      And add {{{inputFile}}} data file with {{contentType}} given input
      {{/inputFile}}
      {{#hasInputInline}}
      And add {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}request{{/hasStepInfo}} data inline with {{contentType}} given input
      {{#inputInline}}
        | {{{.}}} |
      {{/inputInline}}
      {{/hasInputInline}}
      {{#stdInput}}
      And add {{stdInput}} data with {{contentType}} given input
      {{/stdInput}}
      {{#hasInputJsonMap}}
      {{#isPost}}
      And create {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} with given input
      {{/isPost}}
      {{#isPut}}
      And update {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} with given input
      {{/isPut}}
      {{#isPatch}}
      And update {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} with given input
      {{/isPatch}}
      {{#isDelete}}
      And delete {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} with given input
      {{/isDelete}}
      {{#inputJsonMap}}
        | {{{key}}}                   |  {{{value}}}                        |
      {{/inputJsonMap}}
      {{/hasInputJsonMap}}
      When {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}a user{{/hasStepInfo}} {{action}} {{contentType}} in {{url}} resource on {{resource}}
      Then the status code is {{httpStatusCode}}
      {{#schemaValidator}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}object{{/hasStepInfo}} schema validation for resource on {{resource}}
        | {{{key}}} | {{{value}}}|
      {{/schemaValidator}}
      {{#noSkipOutput}}
      {{#hasCsvson}}
      {{#aStdType}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api response aggregation{{/hasStepInfo}} for api-aggregated-std-type {{aStdType}} on {{resource}}
      {{/aStdType}}
      {{^aStdType}}
      {{#matchPattern}}
      And verify {{csvsonPath}} response csvson includes {{matchPattern}} in the response
      {{/matchPattern}}
      {{^matchPattern}}
      And verify {{csvsonPath}} response csvson includes in the response
      {{/matchPattern}}
      {{/aStdType}}
      {{#csvson}}
        | {{{.}}} |
      {{/csvson}}
      {{/hasCsvson}}
      {{#stdType}}
      {{#outputFile}}
      And verify-standard {{stdType}} all {{{outputFile}}} file {{url}} api includes following in the response
      {{/outputFile}}
      {{#hasOutputInline}}
      And verify-standard {{stdType}} all inline {{url}} api includes following in the response
      {{#outputInline}}
        | {{{.}}} |
      {{/outputInline}}
      {{/hasOutputInline}}
      {{/stdType}}
      {{^stdType}}
      {{#hasResponseByField}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}across response{{/hasStepInfo}} includes following in the response
      {{#responseByField}}
        | {{{key}}}                 |  {{{value}}}                          |
      {{/responseByField}}
      {{/hasResponseByField}}
      {{#hasOutputFileByPath}}
      And verify {{resource}} response {{contentType}} include byPath {{{outputFile}}} includes in the response
      {{#outputFileByPath}}
        | {{{.}}} |
      {{/outputFileByPath}}
      {{/hasOutputFileByPath}}
      {{^hasOutputFileByPath}}
      {{#outputFile}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} response XML File {{{outputFile}}} includes in the response
      {{/outputFile}}
      {{/hasOutputFileByPath}}
      {{#hasOutputInline}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} response inline includes in the response
      {{#outputInline}}
        | {{{.}}} |
      {{/outputInline}}
      {{/hasOutputInline}}
      {{#stdOutput}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} response with {{stdOutput}} includes in the response
      {{/stdOutput}}
      {{#hasOutputJsonMap}}
      And verify-all {{url}} {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}api{{/hasStepInfo}} includes following in the response
      {{#outputJsonMap}}
        | {{{key}}}                 |  {{{value}}}                          |
      {{/outputJsonMap}}
      {{/hasOutputJsonMap}}
      {{/stdType}}
      {{/noSkipOutput}}
      {{#hasStorageParams}}
      {{#storageParams}}
      And store {{{key}}} as key and api's {{{value}}} as value
      {{/storageParams}}
      {{/hasStorageParams}}
      {{#hasEvaluateParams}}
      {{#evaluateParams}}
      {{#isString}}
      And evaluate key as {{{key}}} and {{{value}}} as function value
      {{/isString}}
      {{#isInteger}}
      And evaluate key as {{{key}}} and {{{value}}} as integer value
      {{/isInteger}}
      {{#isDecimal}}
      And evaluate key as {{{key}}} and {{{value}}} as decimal value
      {{/isDecimal}}
      {{#isBoolean}}
      And evaluate key as {{{key}}} and {{{value}}} as boolean value
      {{/isBoolean}}
      {{#isCondition}}
      And evaluate the {{{value}}} condition {{{key}}}
      {{/isCondition}}
      {{/evaluateParams}}
      {{/hasEvaluateParams}}
      {{/isRest}}
      {{#isKafka}}
      {{#kafkaOutput}}
      {{#hasResponseByField}}
      {{#kafkaInput}}
      Then verify-by-elements {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}{{stepInfo}}{{/hasStepInfo}} for event {{event}} contains {{identifier}} on {{resource}} with type {{messageType}}
      {{/kafkaInput}}
      {{^kafkaInput}}
      And verify-by-elements {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}{{stepInfo}}{{/hasStepInfo}} for event {{event}} contains {{identifier}} on {{resource}} with type {{messageType}}
      {{/kafkaInput}}
      {{#responseByField}}
        | {{{key}}}                 |  {{{value}}}                          |
      {{/responseByField}}
      {{/hasResponseByField}}
      {{#hasCsvson}}
      {{#aStdType}}
      {{#kafkaInput}}
      Then verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} for event {{event}} message-aggregated-std-type {{aStdType}} on {{resource}} with type {{messageType}}
      {{/kafkaInput}}
      {{^kafkaInput}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} for event {{event}} message-aggregated-std-type {{aStdType}} on {{resource}} with type {{messageType}}
      {{/kafkaInput}}
      {{/aStdType}}
      {{^aStdType}}
      {{#kafkaInput}}
      Then verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} for event {{event}} contains {{identifier}} on {{resource}} with type {{messageType}}
      {{/kafkaInput}}
      {{^kafkaInput}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} for event {{event}} contains {{identifier}} on {{resource}} with type {{messageType}}
      {{/kafkaInput}}
      {{/aStdType}}
      {{#csvson}}
        | {{{.}}} |
      {{/csvson}}
      {{/hasCsvson}}
      {{/kafkaOutput}}
      {{#hasStorageParams}}
      {{#storageParams}}
      And store {{{key}}} as key and message's {{{value}}} as value
      {{/storageParams}}
      {{/hasStorageParams}}
      {{/isKafka}}
      {{#isDatabase}}
      {{#dbOutput}}
      {{#hasCsvson}}
      {{#dbInput}}
      Then validate {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}information on the{{/hasStepInfo}} given {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} on {{resource}}
      {{/dbInput}}
      {{^dbInput}}
      And validate {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}information on the{{/hasStepInfo}} given {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}details{{/hasStepInfo}} on {{resource}}
      {{/dbInput}}
      {{#csvson}}
        | {{{.}}} |
      {{/csvson}}
      {{/hasCsvson}}
      {{/dbOutput}}
      {{#hasStorageParams}}
      {{#storageParams}}
      And store {{{key}}} as key and query's {{{value}}} as value
      {{/storageParams}}
      {{/hasStorageParams}}
      {{/isDatabase}}
      {{#isAMQ}}
      {{#amqOutput}}
      {{#hasCsvson}}
      {{#amqInput}}
      Then verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}information{{/hasStepInfo}} for receiveQ {{event}} contains {{identifier}} on {{resource}} with type AMQ
      {{/amqInput}}
      {{^amqInput}}
      And verify {{#hasStepInfo}}{{{nextStepInfo}}}{{/hasStepInfo}}{{^hasStepInfo}}information{{/hasStepInfo}} for receiveQ {{event}} contains {{identifier}} on {{resource}} with type AMQ
      {{/amqInput}}
      {{#csvson}}
        | {{{.}}} |
      {{/csvson}}
      {{/hasCsvson}}
      {{/amqOutput}}
      {{#hasStorageParams}}
      {{#storageParams}}
      And store {{{key}}} as key and message's {{{value}}} as value
      {{/storageParams}}
      {{/hasStorageParams}}
      {{/isAMQ}}
      {{#hasMultiRun}}
  Examples:
      {{#multiRun}}
        | {{{.}}} |
      {{/multiRun}}
    {{/hasMultiRun}}
{{/items}}
